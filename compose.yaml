services:

  # Acts as a central receiver for logs, metrics, and traces from application
  otel-collector:
    image: otel/opentelemetry-collector:0.111.0
    command: [ "--config=/etc/otel_collector.yml" ]
    volumes:
      - ./sh/otel_collector.yaml:/etc/otel_collector.yml
    ports:
      - "4317:4317" # OTLP gRPC for metrics, traces, and logs
      - "4318:4318" # OTLP HTTP for metrics, traces, and logs
      - "9201:9201" # Metric scraping or health endpoint
    networks:
      - monitoring

  # Stores distributed traces exported from the OTEL collector
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./sh/tempo.yaml:/etc/tempo.yaml
      - ./sh/tempo-data:/var/lib/tempo #/tmp/tempo
    ports:
      - "3200"  # Tempo query API
      - "4317"  # OTLP gRPC receiver for traces
      - "4318"  # OTLP HTTP receiver for traces
    networks:
      - monitoring
  
  # Collects metrics exported by the OTEL collector and stores them for querying
  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver # Allows remote metric writes (e.g., from the OTEL collector)
      - --enable-feature=exemplar-storage # Enables exemplar tracing for metrics
    volumes:
      - ./sh/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090" # Prometheus web interface
    networks:
      - monitoring
  
  # Provides a user interface for querying and visualizing metrics and traces
  grafana:
    image: grafana/grafana:11.4.0
    volumes:
      - ./sh/grafana.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true # Enables anonymous access
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin # Assigns admin privileges to anonymous users
      - GF_AUTH_DISABLE_LOGIN_FORM=true # Disables the login form
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor # Enables the TraceQL editor for querying traces
    ports:
      - "3000:3000" # Grafana web interface
    networks:
      - monitoring  
  
  kafka:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "9094:9094"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5  
        
  kafka-ui:
    image: kafbat/kafka-ui:main
    ports:
      - 8084:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      kafka:
        condition: service_healthy
        
volumes:
  kafka-data:

networks:
  monitoring:
    driver: bridge