// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Standards.Infrastructure.Data;

#nullable disable

namespace Standards.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120152128_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DepartmentHousing", b =>
                {
                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<int>("HousingsId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsId", "HousingsId");

                    b.HasIndex("HousingsId");

                    b.ToTable("DepartmentHousing");

                    b.HasData(
                        new
                        {
                            DepartmentsId = 1,
                            HousingsId = 1
                        },
                        new
                        {
                            DepartmentsId = 2,
                            HousingsId = 1
                        },
                        new
                        {
                            DepartmentsId = 2,
                            HousingsId = 2
                        },
                        new
                        {
                            DepartmentsId = 1,
                            HousingsId = 3
                        },
                        new
                        {
                            DepartmentsId = 3,
                            HousingsId = 3
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.Departments.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Comments1",
                            Name = "Department1",
                            ShortName = "d1"
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Comments2",
                            Name = "Department2",
                            ShortName = "d2"
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Comments3",
                            Name = "Department3",
                            ShortName = "d3"
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.Departments.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Comments1",
                            DepartmentId = 1,
                            Name = "Sector1",
                            ShortName = "s1"
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Comments2",
                            DepartmentId = 1,
                            Name = "Sector2",
                            ShortName = "s2"
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Comments3",
                            DepartmentId = 1,
                            Name = "Sector3",
                            ShortName = "s3"
                        },
                        new
                        {
                            Id = 4,
                            Comments = "Comments4",
                            DepartmentId = 2,
                            Name = "Sector4",
                            ShortName = "s4"
                        },
                        new
                        {
                            Id = 5,
                            Comments = "Comments5",
                            DepartmentId = 2,
                            Name = "Sector5",
                            ShortName = "s5"
                        },
                        new
                        {
                            Id = 6,
                            Comments = "Comments6",
                            DepartmentId = 3,
                            Name = "Sector6",
                            ShortName = "s6"
                        },
                        new
                        {
                            Id = 7,
                            Comments = "Comments7",
                            DepartmentId = 3,
                            Name = "Sector7",
                            ShortName = "s7"
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.Departments.Workplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectorId");

                    b.HasIndex("StandardId");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("Standards.Core.Models.Housings.Housing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FloorsCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Housings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address1",
                            Comments = "Comments1",
                            FloorsCount = 2,
                            Name = "Housing1",
                            ShortName = "h1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address2",
                            Comments = "Comments2",
                            FloorsCount = 1,
                            Name = "Housing2",
                            ShortName = "h2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address3",
                            Comments = "Comments3",
                            FloorsCount = 2,
                            Name = "Housing3",
                            ShortName = "h3"
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.Housings.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("HousingId")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HousingId");

                    b.HasIndex("SectorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Comments1",
                            Floor = 2,
                            Height = 3.0,
                            HousingId = 1,
                            Length = 4.0,
                            Name = "Room1",
                            SectorId = 1,
                            ShortName = "r1",
                            Width = 5.0
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Comments2",
                            Floor = 1,
                            Height = 3.0,
                            HousingId = 2,
                            Length = 5.0,
                            Name = "Room2",
                            SectorId = 1,
                            ShortName = "r2",
                            Width = 5.0
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Comments3",
                            Floor = 2,
                            Height = 3.0,
                            HousingId = 3,
                            Length = 6.0,
                            Name = "Room3",
                            SectorId = 3,
                            ShortName = "r3",
                            Width = 5.0
                        },
                        new
                        {
                            Id = 4,
                            Comments = "Comments4",
                            Floor = 1,
                            Height = 3.0,
                            HousingId = 1,
                            Length = 5.0,
                            Name = "Room4",
                            SectorId = 2,
                            ShortName = "r4",
                            Width = 5.0
                        },
                        new
                        {
                            Id = 5,
                            Comments = "Comments5",
                            Floor = 2,
                            Height = 3.0,
                            HousingId = 3,
                            Length = 6.0,
                            Name = "Room5",
                            SectorId = 3,
                            ShortName = "r5",
                            Width = 5.0
                        },
                        new
                        {
                            Id = 6,
                            Comments = "Comments6",
                            Floor = 1,
                            Height = 3.0,
                            HousingId = 3,
                            Length = 3.0,
                            Name = "Room6",
                            SectorId = 2,
                            ShortName = "r6",
                            Width = 4.0
                        },
                        new
                        {
                            Id = 7,
                            Comments = "Comments7",
                            Floor = 2,
                            Height = 3.0,
                            HousingId = 1,
                            Length = 6.0,
                            Name = "Room7",
                            SectorId = 4,
                            ShortName = "r7",
                            Width = 5.0
                        },
                        new
                        {
                            Id = 8,
                            Comments = "Comments8",
                            Floor = 1,
                            Height = 3.0,
                            HousingId = 2,
                            Length = 3.0,
                            Name = "Room8",
                            SectorId = 5,
                            ShortName = "r8",
                            Width = 4.0
                        },
                        new
                        {
                            Id = 9,
                            Comments = "Comments9",
                            Floor = 1,
                            Height = 3.0,
                            HousingId = 2,
                            Length = 6.0,
                            Name = "Room9",
                            SectorId = 4,
                            ShortName = "r9",
                            Width = 5.0
                        },
                        new
                        {
                            Id = 10,
                            Comments = "Comments10",
                            Floor = 1,
                            Height = 3.0,
                            HousingId = 2,
                            Length = 3.0,
                            Name = "Room10",
                            SectorId = 5,
                            ShortName = "r10",
                            Width = 4.0
                        },
                        new
                        {
                            Id = 11,
                            Comments = "Comments11",
                            Floor = 2,
                            Height = 3.0,
                            HousingId = 3,
                            Length = 6.0,
                            Name = "Room11",
                            SectorId = 6,
                            ShortName = "r11",
                            Width = 7.0
                        },
                        new
                        {
                            Id = 12,
                            Comments = "Comments12",
                            Floor = 2,
                            Height = 3.0,
                            HousingId = 3,
                            Length = 6.0,
                            Name = "Room12",
                            SectorId = 7,
                            ShortName = "r12",
                            Width = 5.0
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.MetrologyControl.CalibrationJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("SertificateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SertificateImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("StandardId");

                    b.ToTable("CalibrationsJournal");
                });

            modelBuilder.Entity("Standards.Core.Models.MetrologyControl.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Standards.Core.Models.MetrologyControl.VerificationJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("SertificateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SertificateImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("StandardId");

                    b.ToTable("VerificationsJournal");
                });

            modelBuilder.Entity("Standards.Core.Models.Persons.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Comments1",
                            Name = "Без категории",
                            ShortName = ""
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Comments1",
                            Name = "Вторая квалификационная категория",
                            ShortName = "2 категория"
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Comments1",
                            Name = "Первая квалификационная категория",
                            ShortName = "1 категория"
                        },
                        new
                        {
                            Id = 4,
                            Comments = "Comments1",
                            Name = "Ведущий",
                            ShortName = "Ведущий"
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.Persons.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthdayDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectorId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthdayDate = new DateTime(2000, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 2,
                            Comments = "Comments1",
                            FirstName = "Антон",
                            LastName = "Чехов",
                            MiddleName = "Сергеевич",
                            PositionId = 2,
                            Role = "Engineer",
                            RoomId = 1,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthdayDate = new DateTime(2001, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 3,
                            Comments = "Comments1",
                            FirstName = "Дмитрий",
                            LastName = "Тургенев",
                            MiddleName = "Анатольевич",
                            PositionId = 2,
                            Role = "Engineer",
                            RoomId = 2,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthdayDate = new DateTime(1999, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 4,
                            Comments = "Comments1",
                            FirstName = "Сергей",
                            LastName = "Толстой",
                            MiddleName = "Романович",
                            PositionId = 3,
                            Role = "SectorHead",
                            RoomId = 3,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 4,
                            BirthdayDate = new DateTime(1998, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 3,
                            Comments = "Comments1",
                            FirstName = "Петр",
                            LastName = "Достоевский",
                            MiddleName = "Артемович",
                            PositionId = 4,
                            Role = "DepartmentHead",
                            RoomId = 4,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 5,
                            BirthdayDate = new DateTime(2002, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 4,
                            Comments = "Comments1",
                            FirstName = "Иван",
                            LastName = "Пушкин",
                            MiddleName = "Никодимович",
                            PositionId = 2,
                            Role = "Engineer",
                            RoomId = 5,
                            SectorId = 3
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.Persons.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Comments1",
                            Name = "Техник",
                            ShortName = "Техник"
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Comments1",
                            Name = "Инженер",
                            ShortName = "Инженер"
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Comments1",
                            Name = "Начальник сектора",
                            ShortName = "Нач. сектора"
                        },
                        new
                        {
                            Id = 4,
                            Comments = "Comments1",
                            Name = "Начальник отдела",
                            ShortName = "Нач. отдела"
                        });
                });

            modelBuilder.Entity("Standards.Core.Models.Quantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Quantities");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UnitId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("StandardId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.ServiceJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StandardId");

                    b.ToTable("ServicesJournal");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Standards.Core.Models.Standards.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<double>("GradeValue")
                        .HasColumnType("float");

                    b.Property<double>("GradeValueEnd")
                        .HasColumnType("float");

                    b.Property<double>("GradeValueStart")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("RangeEnd")
                        .HasColumnType("float");

                    b.Property<double>("RangeStart")
                        .HasColumnType("float");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("StandardId");

                    b.HasIndex("UnitId");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("Standards.Core.Models.Standards.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Standards.Core.Models.Standards.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CalibrationInterval")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ResponsibleId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VerificationInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("Standards.Core.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityId")
                        .HasColumnType("int");

                    b.Property<string>("RuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuantityId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Standards.Core.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockOutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockOutEnd")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Email = "user1@email.com",
                            IsEmailConfirmed = false,
                            IsLockOutEnabled = false,
                            IsTwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Email = "user2@email.com",
                            IsEmailConfirmed = false,
                            IsLockOutEnabled = false,
                            IsTwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Email = "user3@email.com",
                            IsEmailConfirmed = false,
                            IsLockOutEnabled = false,
                            IsTwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Email = "user4@email.com",
                            IsEmailConfirmed = false,
                            IsLockOutEnabled = false,
                            IsTwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Email = "user5@email.com",
                            IsEmailConfirmed = false,
                            IsLockOutEnabled = false,
                            IsTwoFactorEnabled = false,
                            UserName = "user5"
                        });
                });

            modelBuilder.Entity("DepartmentHousing", b =>
                {
                    b.HasOne("Standards.Core.Models.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Housings.Housing", null)
                        .WithMany()
                        .HasForeignKey("HousingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Standards.Core.Models.Departments.Sector", b =>
                {
                    b.HasOne("Standards.Core.Models.Departments.Department", "Department")
                        .WithMany("Sectors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Standards.Core.Models.Departments.Workplace", b =>
                {
                    b.HasOne("Standards.Core.Models.Persons.Person", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Housings.Room", "Room")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Departments.Sector", null)
                        .WithMany("Workplaces")
                        .HasForeignKey("SectorId");

                    b.HasOne("Standards.Core.Models.Standards.Standard", null)
                        .WithMany("Workplaces")
                        .HasForeignKey("StandardId");

                    b.Navigation("Responsible");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Standards.Core.Models.Housings.Room", b =>
                {
                    b.HasOne("Standards.Core.Models.Housings.Housing", "Housing")
                        .WithMany("Rooms")
                        .HasForeignKey("HousingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Departments.Sector", "Sector")
                        .WithMany("Rooms")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Housing");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Standards.Core.Models.MetrologyControl.CalibrationJournal", b =>
                {
                    b.HasOne("Standards.Core.Models.MetrologyControl.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Standards.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("Standards.Core.Models.MetrologyControl.VerificationJournal", b =>
                {
                    b.HasOne("Standards.Core.Models.MetrologyControl.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Standards.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("Standards.Core.Models.Persons.Person", b =>
                {
                    b.HasOne("Standards.Core.Models.Persons.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("Standards.Core.Models.Persons.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Persons.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Housings.Room", null)
                        .WithMany("Persons")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Standards.Core.Models.Departments.Sector", "Sector")
                        .WithMany("Persons")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Position");

                    b.Navigation("Sector");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Standards.Core.Models.Quantity", b =>
                {
                    b.HasOne("Standards.Core.Models.Services.Service", null)
                        .WithMany("MaterialsQuantities")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.Material", b =>
                {
                    b.HasOne("Standards.Core.Models.Services.Service", null)
                        .WithMany("Materials")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Standards.Core.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.Service", b =>
                {
                    b.HasOne("Standards.Core.Models.Services.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Standards.Standard", null)
                        .WithMany("Services")
                        .HasForeignKey("StandardId");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.ServiceJournal", b =>
                {
                    b.HasOne("Standards.Core.Models.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Standards.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Service");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("Standards.Core.Models.Standards.Characteristic", b =>
                {
                    b.HasOne("Standards.Core.Models.Standards.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Standards.Standard", "Standard")
                        .WithMany("Characteristics")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Standard");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Standards.Core.Models.Standards.Standard", b =>
                {
                    b.HasOne("Standards.Core.Models.Persons.Person", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("Standards.Core.Models.Unit", b =>
                {
                    b.HasOne("Standards.Core.Models.Quantity", "Quantity")
                        .WithMany("Units")
                        .HasForeignKey("QuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Standards.Core.Models.Services.Service", null)
                        .WithMany("MaterialsUnits")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Quantity");
                });

            modelBuilder.Entity("Standards.Core.Models.Departments.Department", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Standards.Core.Models.Departments.Sector", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("Rooms");

                    b.Navigation("Workplaces");
                });

            modelBuilder.Entity("Standards.Core.Models.Housings.Housing", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Standards.Core.Models.Housings.Room", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("WorkPlaces");
                });

            modelBuilder.Entity("Standards.Core.Models.Quantity", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("Standards.Core.Models.Services.Service", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("MaterialsQuantities");

                    b.Navigation("MaterialsUnits");
                });

            modelBuilder.Entity("Standards.Core.Models.Standards.Standard", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("Services");

                    b.Navigation("Workplaces");
                });
#pragma warning restore 612, 618
        }
    }
}
